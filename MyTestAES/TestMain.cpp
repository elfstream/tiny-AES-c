
#include <stdio.h>
#include <string.h>
#include "mystdint.h"

#define CBC 1
#define CTR 1
#define ECB 1

// #define AES256 1
#define AES192 1
// #define AES128 1
#include "aes.hpp"

static void phex(uint8_t* str, int iSize)
{
    unsigned char i;
    for (i = 0; i < iSize; ++i)
        printf("%.2x ", str[i]);
    printf("\n");
}

int main()
{
#if defined(AES256)
    printf("\nTesting AES256\n\n");
	const int iAlignSize = 32;
#elif defined(AES192)
    printf("\nTesting AES192\n\n");
	const int iAlignSize = 24;
#elif defined(AES128)
    printf("\nTesting AES128\n\n");
	const int iAlignSize = 16;
#else
    printf("You need to specify a symbol between AES128, AES192 or AES256. Exiting");
    return 0;
#endif

#if 0
	uint8_t in[] = { 0x6b, 0xc1, 0xbe, 0xe2, 0x2e, 0x40, 0x9f, 0x96, 0xe9, 0x3d, 0x7e, 0x11, 0x73, 0x93, 0x17, 0x2a };
#else
	char szText[] = "hello world!";
	const int iSize = strlen(szText);
	int iSrcBufSizeAlign = (iSize / iAlignSize)*iAlignSize + ((iSize%iAlignSize>0)?iAlignSize:0);
	uint8_t* in = new uint8_t[iSrcBufSizeAlign]; // (uint8_t*)szText;
	memset(in, 0, iSrcBufSizeAlign);
	memcpy(in, szText, iSize);
#endif
	printf("source:\n");
	phex(in, iSrcBufSizeAlign);
	printf("\n");
	{
		/// º”√‹
		#if defined(AES256)
		uint8_t key[] = { 0x60, 0x3d, 0xeb, 0x10, 0x15, 0xca, 0x71, 0xbe, 0x2b, 0x73, 0xae, 0xf0, 0x85, 0x7d, 0x77, 0x81,
						  0x1f, 0x35, 0x2c, 0x07, 0x3b, 0x61, 0x08, 0xd7, 0x2d, 0x98, 0x10, 0xa3, 0x09, 0x14, 0xdf, 0xf4 };
		uint8_t iv[] = { 0xa0, 0xa3, 0x38, 0x10, 0x15, 0xca, 0x71, 0xbe, 0x2b, 0x73, 0xae, 0xf0, 0x85, 0x7d, 0x77, 0x81,
						  0x7f, 0x35, 0x2c, 0x07, 0x3b, 0x61, 0x08, 0xd7, 0x2d, 0x98, 0x10, 0xa3, 0x09, 0x14, 0xdf, 0xf4 };
		// uint8_t out[] = { 0xf3, 0xee, 0xd1, 0xbd, 0xb5, 0xd2, 0xa0, 0x3c, 0x06, 0x4b, 0x5a, 0x7e, 0x3d, 0xb1, 0x81, 0xf8 };
	#elif defined(AES192)
		uint8_t key[] = { 0x8e, 0x73, 0xb0, 0xf7, 0xda, 0x0e, 0x64, 0x52, 0xc8, 0x10, 0xf3, 0x2b, 0x80, 0x90, 0x79, 0xe5,
						  0x62, 0xf8, 0xea, 0xd2, 0x52, 0x2c, 0x6b, 0x7b };
		uint8_t iv[] = { 0x39, 0xa8, 0xb0, 0xf7, 0xda, 0x0e, 0x64, 0x52, 0xc8, 0x10, 0xf3, 0x2b, 0x80, 0x90, 0x79, 0xe5,
						  0x62, 0x79, 0xea, 0xd2, 0x52, 0x2c, 0x6b, 0x7b };
		// uint8_t out[] = { 0xbd, 0x33, 0x4f, 0x1d, 0x6e, 0x45, 0xf2, 0x5f, 0xf7, 0x12, 0xa2, 0x14, 0x57, 0x1f, 0xa5, 0xcc };
	#elif defined(AES128)
		uint8_t key[] = { 0x1c, 0x7e, 0x15, 0x16, 0x28, 0xae, 0xd2, 0xa6, 0xab, 0xf7, 0x15, 0x88, 0x09, 0xcf, 0x4f, 0x3c };
		uint8_t iv[] = { 0x97, 0x03, 0x39, 0x16, 0x28, 0xae, 0xd2, 0xa6, 0xab, 0xf7, 0x15, 0x88, 0x17, 0xcf, 0x4f, 0x9a };
	#endif

		// uint8_t in[]  = { 0x6b, 0xc1, 0xbe, 0xe2, 0x2e, 0x40, 0x9f, 0x96, 0xe9, 0x3d, 0x7e, 0x11, 0x73, 0x93, 0x17, 0x2a };
		struct AES_ctx ctx;

		// AES_init_ctx(&ctx, key);
		// AES_ECB_encrypt(&ctx, in);
		AES_init_ctx_iv(&ctx, key, iv);
		AES_CBC_encrypt_buffer(&ctx, (uint8_t*)in, iSrcBufSizeAlign);

		printf("ECB encrypt: \n");
		phex(in, iSrcBufSizeAlign);
	}

	printf("\n");
	{
		//// Ω‚√‹
		#if defined(AES256)
		uint8_t key[] = { 0x60, 0x3d, 0xeb, 0x10, 0x15, 0xca, 0x71, 0xbe, 0x2b, 0x73, 0xae, 0xf0, 0x85, 0x7d, 0x77, 0x81,
						  0x1f, 0x35, 0x2c, 0x07, 0x3b, 0x61, 0x08, 0xd7, 0x2d, 0x98, 0x10, 0xa3, 0x09, 0x14, 0xdf, 0xf4 };
		uint8_t iv[] = { 0xa0, 0xa3, 0x38, 0x10, 0x15, 0xca, 0x71, 0xbe, 0x2b, 0x73, 0xae, 0xf0, 0x85, 0x7d, 0x77, 0x81,
						  0x7f, 0x35, 0x2c, 0x07, 0x3b, 0x61, 0x08, 0xd7, 0x2d, 0x98, 0x10, 0xa3, 0x09, 0x14, 0xdf, 0xf4 };
		// uint8_t in[]  = { 0xf3, 0xee, 0xd1, 0xbd, 0xb5, 0xd2, 0xa0, 0x3c, 0x06, 0x4b, 0x5a, 0x7e, 0x3d, 0xb1, 0x81, 0xf8 };
	#elif defined(AES192)
		uint8_t key[] = { 0x8e, 0x73, 0xb0, 0xf7, 0xda, 0x0e, 0x64, 0x52, 0xc8, 0x10, 0xf3, 0x2b, 0x80, 0x90, 0x79, 0xe5,
						  0x62, 0xf8, 0xea, 0xd2, 0x52, 0x2c, 0x6b, 0x7b };
		uint8_t iv[] = { 0x39, 0xa8, 0xb0, 0xf7, 0xda, 0x0e, 0x64, 0x52, 0xc8, 0x10, 0xf3, 0x2b, 0x80, 0x90, 0x79, 0xe5,
						  0x62, 0x79, 0xea, 0xd2, 0x52, 0x2c, 0x6b, 0x7b };
		// uint8_t in[]  = { 0xbd, 0x33, 0x4f, 0x1d, 0x6e, 0x45, 0xf2, 0x5f, 0xf7, 0x12, 0xa2, 0x14, 0x57, 0x1f, 0xa5, 0xcc };
	#elif defined(AES128)
		uint8_t key[] = { 0x1c, 0x7e, 0x15, 0x16, 0x28, 0xae, 0xd2, 0xa6, 0xab, 0xf7, 0x15, 0x88, 0x09, 0xcf, 0x4f, 0x3c };
		uint8_t iv[] = { 0x97, 0x03, 0x39, 0x16, 0x28, 0xae, 0xd2, 0xa6, 0xab, 0xf7, 0x15, 0x88, 0x17, 0xcf, 0x4f, 0x9a };
	#endif
		struct AES_ctx ctx;
		// AES_init_ctx(&ctx, key);
		// AES_ECB_decrypt(&ctx, in);
		AES_init_ctx_iv(&ctx, key, iv);
		AES_CBC_decrypt_buffer(&ctx, (uint8_t*)in, iSrcBufSizeAlign);

		printf("ECB decrypt: \n");
		phex(in, iSrcBufSizeAlign);
		/*if (0 == memcmp((char*) out, (char*) in, 16)) 
		{
			printf("SUCCESS!\n");
			return(0);
		}
		else
		{
			printf("FAILURE!\n");
			return(1);
		}*/
	}

	return 0;
}